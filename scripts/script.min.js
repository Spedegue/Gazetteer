let userCoords={};const countryList=[];let countryOutline;const weatherUrl="https://tile.openweathermap.org/map/{layer}/{z}/{x}/{y}.png?appid=3f47e7abc196db007ccb9df586b8592a",dark=L.tileLayer("https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",maxZoom:19}),satellite=L.tileLayer("https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",{minZoom:1,attribution:"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community"}),light=L.tileLayer("https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",maxZoom:19}),earthAtNight=L.tileLayer("https://map1.vis.earthdata.nasa.gov/wmts-webmerc/VIIRS_CityLights_2012/default/{time}/{tilematrixset}{maxZoom}/{z}/{y}/{x}.{format}",{attribution:'Imagery provided by services from the Global Imagery Browse Services (GIBS), operated by the NASA/GSFC/Earth Science Data and Information System (<a href="https://earthdata.nasa.gov">ESDIS</a>) with funding provided by NASA/HQ.',maxZoom:8,minZoom:2,format:"jpg",time:"",tilematrixset:"GoogleMapsCompatible_Level"}),temp=L.tileLayer(weatherUrl,{tileSize:512,zoomOffset:-1,layer:"temp_new",minZoom:2}),precipitation=L.tileLayer(weatherUrl,{tileSize:512,minZoom:2,zoomOffset:-1,layer:"precipitation_new"}),map=L.map("map",{layers:[dark]}),baseMaps={Light:light,Dark:dark,Satellite:satellite,"Earth At Night":earthAtNight},weatherOverlays={Temperature:temp,Precipitation:precipitation};L.control.layers(baseMaps,weatherOverlays).addTo(map);const earthquakeLayer=L.layerGroup(),cityLayer=L.layerGroup(),monumentLayer=L.layerGroup(),monumentMarkers=L.markerClusterGroup({iconCreateFunction:cluster=>L.divIcon({html:`<div><span>${cluster.getChildCount()}</span></div>`,className:"monument-marker-cluster marker-cluster",iconSize:new L.Point(40,40)})}),getCountryList=()=>{const url="php/getCountryList.php";$.getJSON(url,data=>{$(data).each((key,value)=>{countryList.push(value)})})},getCountryInfo=countryCode=>{$.ajax({url:"php/getCountryInfo.php",dataType:"json",type:"POST",data:{countryCode:countryCode}}).done(result=>{const c=result.data,activeCountry=new Country(c.name,c.alpha2Code,c.area,c.flag,c.capital,c.population,c.currencies[0].name,c.currencies[0].symbol);activeCountry.displayInfo(),activeCountry.getCities(),activeCountry.getMonuments(),activeCountry.getBoundingBox()})},selectNewCountry=(country,type)=>{const start=Date.now();$.ajax({url:"php/getPolygon.php",type:"POST",dataType:"json",data:{country:country,type:type}}).done(result=>{const countryCode=result.properties.ISO_A3;countryOutline&&countryOutline.clearLayers(),countryOutline=L.geoJSON(result,{style:{color:"#fd7e14"}}).addTo(map),map.fitBounds(countryOutline.getBounds()),getCountryInfo(countryCode),console.log(Date.now()-start)}).fail(()=>{console.log("Error in selectNewCountry")})},getCountryFromCoords=(latitude,longitude)=>{$.ajax({url:"php/getCountryFromCoords.php",type:"POST",dataType:"json",data:{lat:latitude,long:longitude}}).done(result=>{const data=result.data[0].components,alpha3Code=data["ISO_3166-1_alpha-3"];data.country&&($("#countrySearch").val(data.country),adjustFontToFitSearchbar(data.country),selectNewCountry(alpha3Code,"code"))}).fail(()=>{$("#modalTitle").html("Error"),$("#modalBody").html("Unfortunately there was an error finding a country for these coordinates. Please try a different location"),$("#infoModal").modal()})},jumpToUserLocation=()=>{navigator.geolocation?navigator.geolocation.getCurrentPosition(position=>{const{longitude:longitude,latitude:latitude}=position.coords;userCoords={longitude:longitude,latitude:latitude},getCountryFromCoords(latitude,longitude)},error=>{selectNewCountry("GBR","code"),userCoords={longitude:-.118092,latitude:51.509865},alert("Location request denied. Sending you to the UK by default, distances shown will be based on London.")}):selectNewCountry("GBR","code")},handleSearchbarChange=(event,ui)=>{const country=ui.item.value;adjustFontToFitSearchbar(country),selectNewCountry(country,"name")},adjustFontToFitSearchbar=country=>{country.length>25?$("#countrySearch").css("font-size","0.6em"):country.length>15?$("#countrySearch").css("font-size","1em"):$("#countrySearch").css("font-size","1.3em")},getCountryFromClick=event=>{const{lat:lat,lng:lng}=event.latlng;getCountryFromCoords(lat,lng)};$("#countrySearch").autocomplete({source:countryList,minLength:0,select:handleSearchbarChange,position:{my:"top",at:"bottom",of:"#countrySearch"}});const infoPopup=event=>{let marker;const markerDetails=event.target.options;"city"==markerDetails.type?marker=new City(markerDetails.latitude,markerDetails.longitude,markerDetails.geonameId,markerDetails.name,markerDetails.population,markerDetails.type):"monument"==markerDetails.type&&(marker=new Monument(markerDetails.latitude,markerDetails.longitude,markerDetails.geonameId,markerDetails.name,markerDetails.type)),marker.getDistanceFromLatLonInKm(userCoords.latitude,userCoords.longitude),marker.getWikiDetails(),marker.getWeatherInfo()},removeLoader=()=>{countryOutline&&($("#preloader").delay(100).fadeOut("slow",()=>{$(this).remove()}),clearInterval(checkInterval))};let checkInterval=setInterval(removeLoader,50);$(document).ready(()=>{jumpToUserLocation(),removeLoader(),getCountryList(),$("#countrySearch").click(()=>$("#countrySearch").val("")),map.on("click",getCountryFromClick),$("#earthquakeBtn").click(()=>{map.removeLayer(cityLayer),map.removeLayer(monumentMarkers),earthquakeLayer.addTo(map)}),$("#cityBtn").click(()=>{map.removeLayer(earthquakeLayer),map.removeLayer(monumentMarkers),map.addLayer(cityLayer)}),$("#monumentBtn").click(()=>{map.removeLayer(earthquakeLayer),map.removeLayer(cityLayer),map.addLayer(monumentMarkers)})});